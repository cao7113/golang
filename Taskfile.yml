# https://taskfile.dev
version: '3'
vars:
  DB_USER: root
  DB_PASSWORD: 
  DB_NAME: golang_test
  #DB_URL: mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp/{{.DB_NAME}}?parseTime=true
  DB_URL: mysql://root:@tcp/golang_test?parseTime=true
  MYSQL_CLI_OPTS: "-u{{.DB_USER}} "
  #MIG_PATH: datasource/migrate
  MIG_PATH: migrations
  GOMODNAME: "github.com/cao7113/proto-golang"
  pt_version: 1.10.0

includes:
  os: ./Taskfile_{{OS}}.yml

tasks:

  install-prototool-docker:
    desc: install uber prototool docker from https://github.com/uber/prototool
    cmds:
      - docker pull uber/prototool:{{.pt_version}}
      - docker run --rm uber/prototool prototool version

  pt:
    cmds:
      - |
        docker run --rm -v "$(pwd):/work" uber/prototool:{{.pt_version}} \
        prototool version

  # corbra
  cb-hi:
    name: run cobra proto
    cmds:
      - go run cobra/proto/main.go -v
  cb-try:
    name: run cobra proto try
    cmds:
      - go run cobra/proto/main.go try

  info:
    cmds:
    - |
      echo DB_NAME={{.DB_NAME}}
      echo DB_URL={{.DB_URL}}

  test-dingtalk:
    desc: test dingtalk message https://ding-doc.dingtalk.com/doc#/serverapi3/iydd5h
    cmds:
      # echo export Atoken=todo-set-your-token
      - |
        curl 'https://oapi.dingtalk.com/robot/send?access_token={{.Atoken}}' \
        -H 'Content-Type: application/json' \
        -d '{"msgtype": "text", 
            "text": {
                  "content": "Up我就是我, 是不一样的烟火"
            }
          }'

  ## Golangci-lint
  lint:
    desc: run golangci-lint
    cmds:
      - golangci-lint run -v ./...
      # docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v1.21.0 golangci-lint run -v
  linters:
    desc: list current golangci-lint linters
    cmds:
      # https://raw.githubusercontent.com/golangci/golangci-lint/v1.20.1/.golangci.example.yml
      - golangci-lint linters -v
  init-cilint:
    desc: init CiLint config
    cmds:
    - wget https://raw.githubusercontent.com/golangci/golangci-lint/master/.golangci.example.yml

  test:
    desc: run go test
    cmds:
      - go test ./... -v
    env:
      APP_ENV: test

  test-env:
    cmds:
      - go test -v ./tests/env_test.go
    env:
      APP_ENV: test

  #  $ go get -u github.com/golang/mock/gomock
  #  $ go install github.com/golang/mock/mockgen
  #  mockgen -source=./person/male.go -destination=./mock/male_mock.go -package=mock
  gogen:
    desc: generate mock files by gomock
    cmds:
      - go generate ./...

  install-mockgen:
    desc: install mockgen
    cmds:
      - go install github.com/golang/mock/mockgen

  run:
    cmds:
      - go run main.go

  mod-up:
    cmds:
      - go mod tidy -v
  get:
    cmds:
      - task: mod-up
    
  ## docker
  dkcom-up:
    cmds:
      - docker-compose up -d
  dk-build:
    cmds:
      - docker build -t proto-golang-try .
  dk-run:
    deps:
      - dk-build
    cmds:
      - docker run --rm proto-golang-try
  dk-build-test:
    cmds:
      - docker build -t proto-golang-test -f Dockerfile.tests .
  dk-test:
    cmds:
      - docker-compose up -d db
      - task: db-reset
      - task: test
    env:
      APP_ENV: test

  ## DB
  db:
    desc: enter db session
    cmds:
      - mysql -u{{.DB_USER}} {{.DB_NAME}}
  db-create:
    cmds:
      - mysql -u{{.DB_USER}} -e "create database if not exists \`{{.DB_NAME}}\`;"
  db-drop:
    cmds:
      - mysql -u{{.DB_USER}} -e "drop database if exists \`{{.DB_NAME}}\`;"
  # migrate create -ext sql -dir {{.MIG_PATH}} create_users_table
  db-up:
    desc: migrate up
    cmds:
      #- migrate -database $DB_URL -path {{.MIG_PATH}} up
      - migrate -database mysql://root:@tcp/golang_test?parseTime=true -path {{.MIG_PATH}} up
  db-down:
    desc: migrate down
    cmds:
      - migrate -database $DB_URL -path {{.MIG_PATH}} down
  db-reup:
    desc: re-setup db
    cmds:
      # call tasks serially other than concurrently
      - task: db-drop
      - task: db-create
      - task: db-up
  db-dbs:
    desc: show databases
    cmds:
      - mysql -uroot -e "show databases"
  db-tables:
    desc: show tables
    cmds:
      - mysql -uroot {{.DB_NAME}} -e "show full tables"
  install-db-mig:
    desc: install migrations by https://github.com/golang-migrate/migrate/tree/master/cmd/migrate
    cmds:
      - echo should implement in Taskfile_{{GOOS}}.yml

  ## gore CLI
  cli:
    desc: Auto-importing (gore -autoimport), quit using Ctrl+D or :quit or :q
    cmds:
      - gore -autoimport
  install-gore:
    desc: install https://github.com/motemen/gore
    cmds:
      - |
        # The gore command requires Go tool-chains on runtime, so standalone binary is not distributed.
        GO111MODULE=off go get -u github.com/motemen/gore/cmd/gore
        # Make sure $GOPATH/bin is in your $PATH.
        GO111MODULE=off go get -u github.com/mdempsky/gocode   # for code completion
        GO111MODULE=off go get -u github.com/k0kubun/pp        # or github.com/davecgh/go-spew/spew